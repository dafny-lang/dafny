// minimal_fileio_test.dfy

method Main()
  decreases *
{
  var testContent := "Hello, Rust FileIO!";
  var testPath := "test_file.txt";
  var writeResult := Std.FileIO.WriteUTF8ToFile(testPath, testContent);
  if writeResult.Pass? {
    print "Successfully wrote to file\n";
  } else {
    print "Failed to write to file: ", writeResult.error, "\n";
    return;
  }
  var readResult := Std.FileIO.ReadUTF8FromFile(testPath);
  if readResult.Success? {
    print "Successfully read from file: '", readResult.value, "'\n";
  } else {
    print "Failed to read from file: ", readResult.error, "\n";
  }
}

module Wrappers {
  datatype Result<T, E> = Success(value: T) | Failure(error: E)

  datatype Outcome<E> = Pass | Failure(error: E)
}

module {:extern "FileIOInternalExterns_Impl"} FileIOInternalExterns {
  method {:extern} INTERNAL_ReadBytesFromFile(path: string)
      returns (isError: bool, bytesRead: seq<bv8>, errorMsg: string)

  method {:extern} INTERNAL_WriteBytesToFile(path: string, bytes: seq<bv8>)
      returns (isError: bool, errorMsg: string)
}

module Std {

  module FileIO {
    method ReadUTF8FromFile(path: string) returns (result: Result<string, string>)
      decreases *
    {
      var isError, bytesRead, errorMsg := FileIOInternalExterns.INTERNAL_ReadBytesFromFile(path);
      if isError {
        return Result.Failure(errorMsg);
      }
      var text := "";
      for i := 0 to |bytesRead| {
        text := text + [bytesRead[i] as char];
      }
      return Result.Success(text);
    }

    method WriteUTF8ToFile(path: string, content: string) returns (result: Outcome<string>)
      decreases *
    {
      var bytes: seq<bv8> := [];
      for i := 0 to |content| {
        if content[i] as int <= 255 {
          bytes := bytes + [content[i] as bv8];
        } else {
          bytes := bytes + [63 as bv8];
        }
      }
      var isError, errorMsg := FileIOInternalExterns.INTERNAL_WriteBytesToFile(path, bytes);
      if isError {
        return Outcome.Failure(errorMsg);
      }
      return Outcome.Pass;
    }

    import opened Wrappers

    import FileIOInternalExterns
  }
}
