{"$message_type":"diagnostic","message":"failed to resolve: could not find `FileIOInternalExterns` in `Std`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/SimpleFileIO.rs","byte_start":142628,"byte_end":142649,"line_start":3670,"line_end":3670,"column_start":38,"column_end":59,"is_primary":true,"text":[{"text":"                let _x = crate::Std::FileIOInternalExterns::_default::INTERNAL_ReadBytesFromFile(path);","highlight_start":38,"highlight_end":59}],"label":"could not find `FileIOInternalExterns` in `Std`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these structs","code":null,"level":"help","spans":[{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::SimpleFileIO::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Arithmetic::DivInternals::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Arithmetic::DivMod::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Arithmetic::Logarithm::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Arithmetic::ModInternals::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Arithmetic::MulInternals::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Arithmetic::Power2::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Arithmetic::Power::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Base64::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::BoundedInts::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Collections::Array::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Collections::Imap::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Collections::Map::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Collections::Seq::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Collections::Set::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Collections::Tuple::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::API::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ByteStrConversion::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ConcreteSyntax::Spec::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::Deserializer::Uint16StrConversion::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::Deserializer::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::Grammar::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::Serializer::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::Spec::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::Utils::Lexers::Strings::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::Utils::Parsers::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::Utils::Views::Core::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::Values::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::API::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::API::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::ArrayParams::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::Arrays::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::Constants::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::Core::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::Numbers::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::ObjectParams::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::Objects::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::Strings::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::Values::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Serializer::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Math::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Parsers::InputString::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Parsers::StringBuilders::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Parsers::StringParsers::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Strings::CharStrEscaping::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Strings::DecimalConversion::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Strings::HexConversion::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Strings::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Unicode::Base::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Unicode::UnicodeStringsWithUnicodeChar::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Unicode::Utf16EncodingForm::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Unicode::Utf8EncodingForm::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Unicode::Utf8EncodingScheme::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Wrappers::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you import `_default`, refer to it directly","code":null,"level":"help","spans":[{"file_name":"src/SimpleFileIO.rs","byte_start":142616,"byte_end":142651,"line_start":3670,"line_end":3670,"column_start":26,"column_end":61,"is_primary":true,"text":[{"text":"                let _x = crate::Std::FileIOInternalExterns::_default::INTERNAL_ReadBytesFromFile(path);","highlight_start":26,"highlight_end":61}],"label":null,"suggested_replacement":"","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `FileIOInternalExterns` in `Std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/SimpleFileIO.rs:3670:38\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3670\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let _x = crate::Std::FileIOInternalExterns::_default::INTERNAL_ReadBytesFromFile(path);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `FileIOInternalExterns` in `Std`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these structs\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10muse crate::SimpleFileIO::_default;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10muse crate::Std::Arithmetic::DivInternals::_default;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10muse crate::Std::Arithmetic::DivMod::_default;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10muse crate::Std::Arithmetic::Logarithm::_default;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m       and 50 other candidates\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you import `_default`, refer to it directly\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3670\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                let _x = \u001b[0m\u001b[0m\u001b[38;5;9mcrate::Std::FileIOInternalExterns::\u001b[0m\u001b[0m_default::INTERNAL_ReadBytesFromFile(path);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3670\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                let _x = _default::INTERNAL_ReadBytesFromFile(path);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: could not find `FileIOInternalExterns` in `Std`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/SimpleFileIO.rs","byte_start":143847,"byte_end":143868,"line_start":3695,"line_end":3695,"column_start":38,"column_end":59,"is_primary":true,"text":[{"text":"                let _x = crate::Std::FileIOInternalExterns::_default::INTERNAL_WriteBytesToFile(path, bytes);","highlight_start":38,"highlight_end":59}],"label":"could not find `FileIOInternalExterns` in `Std`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these structs","code":null,"level":"help","spans":[{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::SimpleFileIO::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Arithmetic::DivInternals::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Arithmetic::DivMod::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Arithmetic::Logarithm::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Arithmetic::ModInternals::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Arithmetic::MulInternals::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Arithmetic::Power2::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Arithmetic::Power::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Base64::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::BoundedInts::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Collections::Array::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Collections::Imap::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Collections::Map::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Collections::Seq::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Collections::Set::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Collections::Tuple::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::API::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ByteStrConversion::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ConcreteSyntax::Spec::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::Deserializer::Uint16StrConversion::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::Deserializer::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::Grammar::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::Serializer::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::Spec::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::Utils::Lexers::Strings::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::Utils::Parsers::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::Utils::Views::Core::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::Values::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::API::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::API::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::ArrayParams::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::Arrays::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::Constants::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::Core::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::Numbers::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::ObjectParams::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::Objects::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::Strings::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Deserializer::Values::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::JSON::ZeroCopy::Serializer::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Math::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Parsers::InputString::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Parsers::StringBuilders::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Parsers::StringParsers::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Strings::CharStrEscaping::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Strings::DecimalConversion::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Strings::HexConversion::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Strings::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Unicode::Base::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Unicode::UnicodeStringsWithUnicodeChar::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Unicode::Utf16EncodingForm::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Unicode::Utf8EncodingForm::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Unicode::Utf8EncodingScheme::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":141588,"byte_end":141588,"line_start":3647,"line_end":3647,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        pub use ::dafny_runtime::Sequence;","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"use crate::Std::Wrappers::_default;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"if you import `_default`, refer to it directly","code":null,"level":"help","spans":[{"file_name":"src/SimpleFileIO.rs","byte_start":143835,"byte_end":143870,"line_start":3695,"line_end":3695,"column_start":26,"column_end":61,"is_primary":true,"text":[{"text":"                let _x = crate::Std::FileIOInternalExterns::_default::INTERNAL_WriteBytesToFile(path, bytes);","highlight_start":26,"highlight_end":61}],"label":null,"suggested_replacement":"","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `FileIOInternalExterns` in `Std`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/SimpleFileIO.rs:3695:38\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3695\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let _x = crate::Std::FileIOInternalExterns::_default::INTERNAL_WriteBytesToFile(path, bytes);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `FileIOInternalExterns` in `Std`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these structs\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10muse crate::SimpleFileIO::_default;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10muse crate::Std::Arithmetic::DivInternals::_default;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10muse crate::Std::Arithmetic::DivMod::_default;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10muse crate::Std::Arithmetic::Logarithm::_default;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m       and 50 other candidates\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you import `_default`, refer to it directly\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3695\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                let _x = \u001b[0m\u001b[0m\u001b[38;5;9mcrate::Std::FileIOInternalExterns::\u001b[0m\u001b[0m_default::INTERNAL_WriteBytesToFile(path, bytes);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3695\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                let _x = _default::INTERNAL_WriteBytesToFile(path, bytes);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/SimpleFileIO.rs","byte_start":285795,"byte_end":285865,"line_start":6035,"line_end":6035,"column_start":47,"column_end":117,"is_primary":true,"text":[{"text":"                                        data: upcast_id::<crate::Std::JSON::Grammar::SuffixedSequence<D, S>>()(data),","highlight_start":47,"highlight_end":117}],"label":"expected `Sequence<Rc<Suffixed<__T1, __T2>>>`, found `Sequence<Rc<Suffixed<D, S>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":285027,"byte_end":285031,"line_start":6029,"line_end":6029,"column_start":48,"column_end":52,"is_primary":false,"text":[{"text":"                pub fn coerce<__T0: DafnyType, __T1: DafnyType, __T2: DafnyType, __T3: DafnyType>(f_0: Rc<impl ::std::ops::Fn(L) -> __T0 + 'static>, f_1: Rc<impl ::std::ops::Fn(D) -> __T1 + 'static>, f_2: Rc<impl ::std::ops::Fn(S) -> __T2 + 'static>, f_3: Rc<impl ::std::ops::Fn(R) -> __T3 + 'static>) -> Rc<impl ::std::ops::Fn(Bracketed<L, D, S, R>) -> Bracketed<__T0, __T1, __T2, __T3>> {","highlight_start":48,"highlight_end":52}],"label":"expected type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/SimpleFileIO.rs","byte_start":284817,"byte_end":284818,"line_start":6027,"line_end":6027,"column_start":32,"column_end":33,"is_primary":false,"text":[{"text":"            impl<L: DafnyType, D: DafnyType, S: DafnyType, R: DafnyType> Bracketed<L, D, S, R> {","highlight_start":32,"highlight_end":33}],"label":"found type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `Sequence<Rc<Suffixed<__T1, __T2>>>`\n   found enum `Sequence<Rc<Suffixed<D, S>>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/SimpleFileIO.rs:6035:47\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6027\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mimpl<L: DafnyType, D: DafnyType, S: DafnyType, R: DafnyType> Bracketed<L, D, S, R> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfound type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6028\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    /// Given type parameter conversions, returns a lambda to convert this structure\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6029\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    pub fn coerce<__T0: DafnyType, __T1: DafnyType, __T2: DafnyType, __T3: DafnyType>(f_0: Rc<impl ::std::ops::Fn(L) -> __T0 + 'static\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6035\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                            data: upcast_id::<crate::Std::JSON::Grammar::SuffixedSequence<D, S>>()(data),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Sequence<Rc<Suffixed<__T1, __T2>>>`, found `Sequence<Rc<Suffixed<D, S>>>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `Sequence<Rc<Suffixed<\u001b[0m\u001b[0m\u001b[1m\u001b[35m__T1\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m__T2\u001b[0m\u001b[0m>>>`\u001b[0m\n\u001b[0m                found enum `Sequence<Rc<Suffixed<\u001b[0m\u001b[0m\u001b[1m\u001b[35mD\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mS\u001b[0m\u001b[0m>>>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"only `u8` can be cast as `char`, not `i16`","code":{"code":"E0604","explanation":"A cast to `char` was attempted on a type other than `u8`.\n\nErroneous code example:\n\n```compile_fail,E0604\n0u32 as char; // error: only `u8` can be cast as `char`, not `u32`\n```\n\n`char` is a Unicode Scalar Value, an integer value from 0 to 0xD7FF and\n0xE000 to 0x10FFFF. (The gap is for surrogate pairs.) Only `u8` always fits in\nthose ranges so only `u8` may be cast to `char`.\n\nTo allow larger values, use `char::from_u32`, which checks the value is valid.\n\n```\nassert_eq!(86u8 as char, 'V'); // ok!\nassert_eq!(char::from_u32(0x3B1), Some('α')); // ok!\nassert_eq!(char::from_u32(0xD800), None); // not a USV.\n```\n\nFor more information about casts, take a look at the Type cast section in\n[The Reference Book][1].\n\n[1]: https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions\n"},"level":"error","spans":[{"file_name":"src/SimpleFileIO.rs","byte_start":237086,"byte_end":237095,"line_start":5033,"line_end":5033,"column_start":99,"column_end":108,"is_primary":true,"text":[{"text":"                                                            string_of(\"'\").concat(&seq![DafnyChar(b as char)]).concat(&string_of(\"'\"))","highlight_start":99,"highlight_end":108}],"label":"invalid cast","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try `char::from_u32` instead (via a `u32`)","code":null,"level":"help","spans":[{"file_name":"src/SimpleFileIO.rs","byte_start":237086,"byte_end":237095,"line_start":5033,"line_end":5033,"column_start":99,"column_end":108,"is_primary":true,"text":[{"text":"                                                            string_of(\"'\").concat(&seq![DafnyChar(b as char)]).concat(&string_of(\"'\"))","highlight_start":99,"highlight_end":108}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0604]\u001b[0m\u001b[0m\u001b[1m: only `u8` can be cast as `char`, not `i16`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/SimpleFileIO.rs:5033:99\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5033\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   string_of(\"'\").concat(&seq![DafnyChar(b as char)]).concat(&string_of(\"'\"))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9minvalid cast\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try `char::from_u32` instead (via a `u32`)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/SimpleFileIO.rs:5033:99\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5033\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   string_of(\"'\").concat(&seq![DafnyChar(b as char)]).concat(&string_of(\"'\"))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"only `u8` can be cast as `char`, not `i16`","code":{"code":"E0604","explanation":"A cast to `char` was attempted on a type other than `u8`.\n\nErroneous code example:\n\n```compile_fail,E0604\n0u32 as char; // error: only `u8` can be cast as `char`, not `u32`\n```\n\n`char` is a Unicode Scalar Value, an integer value from 0 to 0xD7FF and\n0xE000 to 0x10FFFF. (The gap is for surrogate pairs.) Only `u8` always fits in\nthose ranges so only `u8` may be cast to `char`.\n\nTo allow larger values, use `char::from_u32`, which checks the value is valid.\n\n```\nassert_eq!(86u8 as char, 'V'); // ok!\nassert_eq!(char::from_u32(0x3B1), Some('α')); // ok!\nassert_eq!(char::from_u32(0xD800), None); // not a USV.\n```\n\nFor more information about casts, take a look at the Type cast section in\n[The Reference Book][1].\n\n[1]: https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions\n"},"level":"error","spans":[{"file_name":"src/SimpleFileIO.rs","byte_start":238285,"byte_end":238294,"line_start":5045,"line_end":5045,"column_start":103,"column_end":112,"is_primary":true,"text":[{"text":"                                                                string_of(\"'\").concat(&seq![DafnyChar(b as char)]).concat(&string_of(\"'\"))","highlight_start":103,"highlight_end":112}],"label":"invalid cast","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try `char::from_u32` instead (via a `u32`)","code":null,"level":"help","spans":[{"file_name":"src/SimpleFileIO.rs","byte_start":238285,"byte_end":238294,"line_start":5045,"line_end":5045,"column_start":103,"column_end":112,"is_primary":true,"text":[{"text":"                                                                string_of(\"'\").concat(&seq![DafnyChar(b as char)]).concat(&string_of(\"'\"))","highlight_start":103,"highlight_end":112}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0604]\u001b[0m\u001b[0m\u001b[1m: only `u8` can be cast as `char`, not `i16`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/SimpleFileIO.rs:5045:103\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5045\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   string_of(\"'\").concat(&seq![DafnyChar(b as char)]).concat(&string_of(\"'\"))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9minvalid cast\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try `char::from_u32` instead (via a `u32`)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/SimpleFileIO.rs:5045:103\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5045\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   string_of(\"'\").concat(&seq![DafnyChar(b as char)]).concat(&string_of(\"'\"))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"only `u8` can be cast as `char`, not `i16`","code":{"code":"E0604","explanation":"A cast to `char` was attempted on a type other than `u8`.\n\nErroneous code example:\n\n```compile_fail,E0604\n0u32 as char; // error: only `u8` can be cast as `char`, not `u32`\n```\n\n`char` is a Unicode Scalar Value, an integer value from 0 to 0xD7FF and\n0xE000 to 0x10FFFF. (The gap is for surrogate pairs.) Only `u8` always fits in\nthose ranges so only `u8` may be cast to `char`.\n\nTo allow larger values, use `char::from_u32`, which checks the value is valid.\n\n```\nassert_eq!(86u8 as char, 'V'); // ok!\nassert_eq!(char::from_u32(0x3B1), Some('α')); // ok!\nassert_eq!(char::from_u32(0xD800), None); // not a USV.\n```\n\nFor more information about casts, take a look at the Type cast section in\n[The Reference Book][1].\n\n[1]: https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions\n"},"level":"error","spans":[{"file_name":"src/SimpleFileIO.rs","byte_start":375265,"byte_end":375274,"line_start":7712,"line_end":7712,"column_start":79,"column_end":88,"is_primary":true,"text":[{"text":"                                        string_of(\"'\").concat(&seq![DafnyChar(b as char)]).concat(&string_of(\"'\"))","highlight_start":79,"highlight_end":88}],"label":"invalid cast","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try `char::from_u32` instead (via a `u32`)","code":null,"level":"help","spans":[{"file_name":"src/SimpleFileIO.rs","byte_start":375265,"byte_end":375274,"line_start":7712,"line_end":7712,"column_start":79,"column_end":88,"is_primary":true,"text":[{"text":"                                        string_of(\"'\").concat(&seq![DafnyChar(b as char)]).concat(&string_of(\"'\"))","highlight_start":79,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0604]\u001b[0m\u001b[0m\u001b[1m: only `u8` can be cast as `char`, not `i16`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/SimpleFileIO.rs:7712:79\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7712\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   string_of(\"'\").concat(&seq![DafnyChar(b as char)]).concat(&string_of(\"'\"))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9minvalid cast\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try `char::from_u32` instead (via a `u32`)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/SimpleFileIO.rs:7712:79\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7712\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   string_of(\"'\").concat(&seq![DafnyChar(b as char)]).concat(&string_of(\"'\"))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"only `u8` can be cast as `char`, not `i16`","code":{"code":"E0604","explanation":"A cast to `char` was attempted on a type other than `u8`.\n\nErroneous code example:\n\n```compile_fail,E0604\n0u32 as char; // error: only `u8` can be cast as `char`, not `u32`\n```\n\n`char` is a Unicode Scalar Value, an integer value from 0 to 0xD7FF and\n0xE000 to 0x10FFFF. (The gap is for surrogate pairs.) Only `u8` always fits in\nthose ranges so only `u8` may be cast to `char`.\n\nTo allow larger values, use `char::from_u32`, which checks the value is valid.\n\n```\nassert_eq!(86u8 as char, 'V'); // ok!\nassert_eq!(char::from_u32(0x3B1), Some('α')); // ok!\nassert_eq!(char::from_u32(0xD800), None); // not a USV.\n```\n\nFor more information about casts, take a look at the Type cast section in\n[The Reference Book][1].\n\n[1]: https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions\n"},"level":"error","spans":[{"file_name":"src/SimpleFileIO.rs","byte_start":376224,"byte_end":376233,"line_start":7724,"line_end":7724,"column_start":83,"column_end":92,"is_primary":true,"text":[{"text":"                                            string_of(\"'\").concat(&seq![DafnyChar(b as char)]).concat(&string_of(\"'\"))","highlight_start":83,"highlight_end":92}],"label":"invalid cast","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try `char::from_u32` instead (via a `u32`)","code":null,"level":"help","spans":[{"file_name":"src/SimpleFileIO.rs","byte_start":376224,"byte_end":376233,"line_start":7724,"line_end":7724,"column_start":83,"column_end":92,"is_primary":true,"text":[{"text":"                                            string_of(\"'\").concat(&seq![DafnyChar(b as char)]).concat(&string_of(\"'\"))","highlight_start":83,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0604]\u001b[0m\u001b[0m\u001b[1m: only `u8` can be cast as `char`, not `i16`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/SimpleFileIO.rs:7724:83\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   string_of(\"'\").concat(&seq![DafnyChar(b as char)]).concat(&string_of(\"'\"))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9minvalid cast\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try `char::from_u32` instead (via a `u32`)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/SimpleFileIO.rs:7724:83\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   string_of(\"'\").concat(&seq![DafnyChar(b as char)]).concat(&string_of(\"'\"))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 7 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 7 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0308, E0433, E0604.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0308, E0433, E0604.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
