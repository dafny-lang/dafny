#nullable enable
using System;
using System.Collections;
using System.Text;
using Microsoft.Boogie;

namespace Microsoft.Dafny;

public class SourceOrigin : IOrigin, IComparable<SourceOrigin> {
  public Uri Uri => ReportingRange.Start.Uri;

  public TokenRange EntireRange { get; }
  public TokenRange ReportingRange { get; }
  public bool IncludesRange => true;

  public SourceOrigin(Token start, Token end) {
    this.EntireRange = new TokenRange(start, end);
    this.ReportingRange = EntireRange;
  }
  
  public SourceOrigin(Token start, Token end, Token center) {
    this.EntireRange = new TokenRange(start, end);
    this.ReportingRange = new TokenRange(center, center);
  }
  
  [SyntaxConstructor]
  public SourceOrigin(TokenRange entireRange, TokenRange? reportingRange = null) {
    this.EntireRange = entireRange;
    this.ReportingRange = reportingRange ?? entireRange;
  }

  public int CompareTo(IToken? other) {
    if (other is IOrigin otherOrigin) {
      return EntireRange.CompareTo(otherOrigin.EntireRange);
    }

    return 1;
  }

  public override bool Equals(object? obj) {
    // TODO remove equality members 
    if (obj is SourceOrigin other) {
      return ReportingRange.Start.Equals(other.ReportingRange.Start) && ReportingRange.End.Equals(other.ReportingRange.End);
    }
    return false;
  }

  public override int GetHashCode() {
    return HashCode.Combine(ReportingRange.Start.GetHashCode(), ReportingRange.End.GetHashCode());
  }

  public bool IsInherited(ModuleDefinition m) {
    return false;
  }

  public string PrintOriginal() {
    // TODO SourceOrigin.PrintOriginal.
    return EntireRange.PrintOriginal();
  }

  // TODO rename to Generated, and Token.NoToken to Token.Generated, and remove AutoGeneratedToken.
  public static IOrigin NoToken => Token.NoToken;

  public IOrigin WithVal(string newVal) {
    throw new NotImplementedException();
  }

  public bool IsCopy => false;

  public bool IsSourceToken => !ReferenceEquals(this, NoToken);
  public int kind {
    get => ReportingRange.Start.kind;
    set => throw new NotImplementedException();
  }

  public int pos {
    get => ReportingRange.Start.pos;
    set => throw new NotImplementedException();
  }

  public int col {
    get => ReportingRange.Start.col;
    set => throw new NotImplementedException();
  }

  public int line {
    get => ReportingRange.Start.line;
    set => throw new NotImplementedException();
  }

  public string val {
    get => ReportingRange.Start.val;
    set => throw new InvalidOperationException();
  }

  public bool IsValid => true;

  public int CompareTo(SourceOrigin? other) {
    throw new NotImplementedException();
  }
}