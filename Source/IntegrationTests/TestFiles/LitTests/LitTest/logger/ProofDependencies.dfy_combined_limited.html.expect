<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html
        xmlns="http://www.w3.org/1999/xhtml" lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/>
    <link rel="stylesheet" href="./.resources/coverage.css" type="text/css"/>
    <title>ProofDependencies.dfy, Combined Coverage Report</title>
</head>
<body onload="window['PR_TAB_WIDTH']=4">
<div class="menu" id="menu">
    <a href="./index_combined.html">Index</a>
    <a href="ProofDependencies.dfy_tests_expected.html" class="el_report">Expected Test Coverage (coverage_testing)</a><a href="ProofDependencies.dfy_verification.html" class="el_report">Verification coverage (coverage_verification)</a>
</div>
<h1>ProofDependencies.dfy, Combined Coverage Report</h1>

<pre class="source lang-java linenums">
<span class="na" id="1:1">// RUN: %diff "%s" "%s"










































































































































































module M {
method {:testEntry} RedundantAssumeMethod(n: int)
{
    // either one or the other assumption shouldn't be covered
    assume </span><span class="nc" id="176:12">n > 4</span><span class="na" id="176:17">;
    assume n > 3;
    assert n > 1;
}

method {:testEntry} ContradictoryAssumeMethod(n: int)
</span><span class="nc" id="182:1">{
    assume n > 0;
    assume n < 0;
    assume n == 5; // shouldn't be covered
    assert n < 10; // shouldn't be covered
}

</span><span class="na" id="189:1">method {:testEntry} AssumeFalseMethod(n: int)
</span><span class="nc" id="190:1">{
    assume n == 15; // shouldn't be covered
    assume false;
    assert n < 10; // shouldn't be covered
}

</span><span class="na" id="196:1">// Obvious contradiction in requires clauses.
</span><span class="nc" id="197:1">function {:testEntry} ObviouslyContradictoryRequiresFunc(x: nat): (r: nat)
</span><span class="na" id="198:1">  requires x > 10
  requires x < 10
  ensures </span><span class="nc" id="200:11">r < x</span><span class="na" id="200:16"> // only provable vacuously 
{
</span><span class="nc" id="202:1">  assert x == 10; // contradicts both requires clauses
  x - 1 // not necessarily a valid nat
}

</span><span class="na" id="206:1">method {:testEntry} ObviouslyContradictoryRequiresMethod(x: nat) returns (r: nat)
  requires x > 10
  requires x < 10
  ensures </span><span class="nc" id="209:11">r < x</span><span class="na" id="209:16"> // only provable vacuously
</span><span class="nc" id="210:1">{
  assert x == 10; // contradicts both requires clauses
  return x - 1; // not necessarily a valid nat
}

</span><span class="na" id="215:1">// Obvious redundancy in requires clauses.
function {:testEntry} ObviouslyRedundantRequiresFunc(x: nat): (r: nat)
  requires x < 10
  requires </span><span class="nc" id="218:12">x < 100</span><span class="na" id="218:19"> // implied by previous requires clause
  ensures r < 11 // should cause body and first requires clause to be covered
{
  x + 1
}

method {:testEntry} ObviouslyRedundantRequiresMethod(x: nat) returns (r: nat)
  requires x < 10
  requires </span><span class="nc" id="226:12">x < 100</span><span class="na" id="226:19"> // implied by previous requires clause
  ensures r < 11 // should cause body and first requires clause to be covered
{
  return x + 1;
</span><span class="nc" id="230:1">}

</span><span class="na" id="232:1">// Obviously unnecessary requires clauses.
function {:testEntry} ObviouslyUnnecessaryRequiresFunc(x: nat): (r: nat)
  requires </span><span class="nc" id="234:12">x < 10</span><span class="na" id="234:18"> // not required for the proof
{
  // cause at least a little proof work to be necessary, for nat bounds
  if (x > 5) then x + 2 else x + 1
}

method {:testEntry} ObviouslyUnnecessaryRequiresMethod(x: nat) returns (r: nat)
  requires </span><span class="nc" id="241:12">x < 10</span><span class="na" id="241:18"> // not required for the proof
{
  // cause at least a little proof work to be necessary, for nat bounds
  if (x > 5) { return x + 2; } else { return x + 1; }
</span><span class="nc" id="245:1">}

</span><span class="na" id="247:1">// Code obviously not constrained by ensures clause.
function {:testEntry} ObviouslyUnconstrainedCodeFunc(x: int): (r: (int, int))
  requires x > 10
  ensures r.0 > 10
{
  var a := x + 1; // constrained by ensures clause
  var </span><span class="nc" id="253:7">b</span><span class="na" id="253:8"> := </span><span class="nc" id="253:12">x - 1</span><span class="na" id="253:17">; // not constrained by ensures clause 
  (a,
   b)
}

method {:testEntry} ObviouslyUnconstrainedCodeMethod(x: int) returns (r: (int, int))
  requires x > 10
  ensures r.0 > 10
{
  var a := x + 1; // constrained by ensures clause
  var </span><span class="nc" id="263:7">b := x - 1;</span><span class="na" id="263:18"> // not constrained by ensures clause
  return
    (a,
     b);
</span><span class="nc" id="267:1">}

</span><span class="na" id="269:1">// Partial redundancy in requires clauses.
function {:testEntry} PartiallyRedundantRequiresFunc(x: nat): (r: nat)
  requires </span><span class="nc" id="271:12">x < 100</span><span class="na" id="271:19"> && x < 10 // LHS implied by RHS
  ensures r < 11 // should cause body and RHS clause to be covered
{
  x + 1
}

// Partly unnecessary requires clause.
function {:testEntry} PartiallyUnnecessaryRequiresFunc(x: int): (r: nat)
  requires </span><span class="nc" id="279:12">x < 10</span><span class="na" id="279:18"> && x > 0 // RHS required for proof, but not LHS
{
  // cause at least a little proof work to be necessary, for nat bounds
  if (x > 5) then x - 1 else x + 1
}


// Redundancy of one requires clause due to at least two others, with at least
// one of the three being partly in a separately-defined function.
function {:testEntry} MultiPartRedundantRequiresFunc(x: int): (r: int)
  requires </span><span class="nc" id="289:12">x > 10
</span><span class="na" id="290:1">  requires </span><span class="nc" id="290:12">x < 12
</span><span class="na" id="291:1">  requires x == 11 // implied by the previous two, but neither individually
  ensures r == 11
{
  x
}

method {:testEntry} MultiPartRedundantRequiresMethod(x: int) returns (r: int)
  requires </span><span class="nc" id="298:12">x > 10
</span><span class="na" id="299:1">  requires </span><span class="nc" id="299:12">x < 12
</span><span class="na" id="300:1">  requires x == 11 // implied by the previous two, but neither individually
  ensures r == 11
{
  return x;
</span><span class="nc" id="304:1">}

</span><span class="na" id="306:1">// Contradiction between three different requires clauses, with at least one of
// the three being partly in a separately-defined function (function and
// method).
function {:testEntry} MultiPartContradictoryRequiresFunc(x: int, y: int): (r: int)
  requires x > 10
  requires x < 12
  requires </span><span class="nc" id="312:12">y != 11</span><span class="na" id="312:19"> // contradicts the previous two
  ensures r == 11 // provable from first two preconditions, but shouldn't be covered
{
  x
}

method {:testEntry} MultiPartContradictoryRequiresMethod(x: int, y: int) returns (r: int)
  requires x > 10
  requires x < 12
  requires </span><span class="nc" id="321:12">y != 11</span><span class="na" id="321:19"> // contradicts the previous two
  ensures r == 11 // provable from first two preconditions, but shouldn't be covered
{
  return x;
</span><span class="nc" id="325:1">}

</span><span class="na" id="327:1">function {:testEntry} ContradictoryEnsuresClauseFunc(x: int): (r: int)
  requires </span><span class="nc" id="328:12">x > 1
</span><span class="na" id="329:1">  ensures  </span><span class="nc" id="329:12">r > x</span><span class="na" id="329:17"> && </span><span class="nc" id="329:21">r < 0

</span><span class="na" id="331:1">method {:testEntry} ContradictoryEnsuresClauseMethod(x: int) returns (r: int)
  requires </span><span class="nc" id="332:12">x > 1
</span><span class="na" id="333:1">  ensures  </span><span class="nc" id="333:12">r > x</span><span class="na" id="333:17"> && </span><span class="nc" id="333:21">r < 0

</span><span class="na" id="335:1">// Call function that has contradictory ensures clauses.
</span><span class="nc" id="336:1">function {:testEntry} CallContradictoryFunctionFunc(x: int): (r: int)
</span><span class="na" id="337:1">  requires x > 1
  ensures r < 0
{
  // TODO: Dafny doesn't generate sufficient Boogie code to make the contradiction detectable
</span><span class="nc" id="341:1">  ContradictoryEnsuresClauseFunc(x) - 1
}

</span><span class="na" id="344:1">method {:testEntry} CallContradictoryMethodMethod(x: int) returns (r: int)
  requires x > 1
  ensures </span><span class="nc" id="346:11">r < 0
{
  var y := ContradictoryEnsuresClauseMethod(x);
  return y - 1;
}

</span><span class="na" id="352:1">// False antecedent requires clause
method {:testEntry} FalseAntecedentRequiresClauseMethod(x: int) returns (r: int)
  requires </span><span class="nc" id="354:12">x*x < 0 ==> x == x + 1
</span><span class="na" id="355:1">  ensures r > x
{
  return x + 1;
</span><span class="nc" id="358:1">}

</span><span class="na" id="360:1">// False antecedent assert statement.
method {:testEntry} FalseAntecedentAssertStatementMethod(x: int) {
  var y := x*x;
  assert </span><span class="nc" id="363:10">y < 0 ==> </span><span class="na" id="363:20">x < 0;
}

// False antecedent ensures clause.
method {:testEntry} FalseAntecedentEnsuresClauseMethod(x: int) returns (r: int)
  ensures </span><span class="nc" id="368:11">r < 0 ==> </span><span class="na" id="368:21">x < 0
{
  return x*x;
</span><span class="nc" id="371:1">}

</span><span class="na" id="373:1">function {:testEntry} ObviouslyUnreachableIfExpressionBranchFunc(x: int): (r:int)
  requires x > 0
  ensures r > 0
{
  if x < 0
  then </span><span class="nc" id="378:8">x - 1</span><span class="na" id="378:13"> // unreachable
  else x + 1
}

method {:testEntry} ObviouslyUnreachableIfStatementBranchMethod(x: int) returns (r:int)
  requires x > 0
  ensures r > 0
{
  if x < 0 {
</span><span class="nc" id="387:1">    return x - 1; // unreachable
</span><span class="na" id="388:1">  } else {
    return x + 1;
  }
</span><span class="nc" id="391:1">}

</span><span class="na" id="393:1">datatype T = A | B

function {:testEntry} ObviouslyUnreachableMatchExpressionCaseFunction(t: T): (r:int)
  requires t != A
  ensures r > 1 // alt: r > 0
{
  match t {
    case A => </span><span class="nc" id="400:15">1</span><span class="na" id="400:16"> // unreachable
    case B => 2
  }
}

method {:testEntry} ObviouslyUnreachableMatchStatementCaseMethod(t: T) returns (r:int)
  requires t != A
  ensures r > 1 // alt: r > 0
{
  match t {
</span><span class="nc" id="410:1">    case A => return 1; // unreachable
</span><span class="na" id="411:1">    case B => return 2;
  }
</span><span class="nc" id="413:1">}

</span><span class="na" id="415:1">method {:testEntry} ObviouslyUnreachableReturnStatementMethod(t: T) returns (r:int)
  requires t != A
    ensures r > 1 // alt: r > 0
  {
    if !t.A? {
      return 2;
    }

</span><span class="nc" id="423:1">    return 1; // unreachable
</span><span class="na" id="424:1">  </span><span class="nc" id="424:3">}

</span><span class="na" id="426:1">method {:testEntry} CalcStatementWithSideConditions(x: int) {
  calc == {
    x / 2;
    (x*2) / 4;
  }
}

</span><span class="nc" id="433:1">method {:testEntry} DontWarnAboutVacuousAssertFalse(x: int) {
  assume x == x + 1;
  assert false;
}

</span><span class="na" id="438:1">class C {
  var x: int
  constructor() {}
}

function {:testEntry} GetX(c: C): int
  reads c
{
  c.x
}

method {:testEntry} DontWarnAboutUnusedAssumeTrue(x: int) {
  assume </span><span class="nc" id="450:10">true</span><span class="na" id="450:14">;
  assert 1 + x == x + 1;
}

}

</span></pre>
<div class="footer">
    <span class="right">
        Created with 
        <a href="https://github.com/dafny-lang/dafny">Dafny</a>
    </span>
</div>
</body>
</html>