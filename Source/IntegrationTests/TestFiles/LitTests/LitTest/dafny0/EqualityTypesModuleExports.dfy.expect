EqualityTypesModuleExports.dfy(50,11): Error: type parameter (X) passed to type Dt0 must support equality (got M) (perhaps try declaring type parameter 'M' on line 48 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(51,11): Error: type parameter (Y) passed to type Dt1 must support equality (got M) (perhaps try declaring type parameter 'M' on line 48 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(52,11): Error: type parameter (Z) passed to type Dt2 must support equality (got M) (perhaps try declaring type parameter 'M' on line 48 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(65,11): Error: type parameter 0 (X) passed to type Co0 must support equality (got M) (perhaps try declaring type parameter 'M' on line 63 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(66,11): Error: type parameter 0 (Y) passed to type Co1 must support equality (got M) (perhaps try declaring type parameter 'M' on line 63 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(67,11): Error: type parameter 0 (Z) passed to type Co2 must support equality (got M) (perhaps try declaring type parameter 'M' on line 63 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(99,11): Error: type parameter 0 (B) passed to type Opaque2 must support equality (got M) (perhaps try declaring type parameter 'M' on line 94 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(105,12): Error: type parameter 1 (C) passed to type O'Pake2 must support equality (got M) (perhaps try declaring type parameter 'M' on line 94 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(110,11): Error: type parameter (A) passed to type Syn2 must support equality (got M) (perhaps try declaring type parameter 'M' on line 94 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(115,11): Error: type parameter (A) passed to type Syn5 must support equality (got M) (perhaps try declaring type parameter 'M' on line 94 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(117,11): Error: type parameter 0 (C) passed to type Syn6 must support equality (got M) (perhaps try declaring type parameter 'M' on line 94 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(121,11): Error: type parameter (A) passed to type Subset1 must support equality (got M) (perhaps try declaring type parameter 'M' on line 94 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(123,11): Error: type parameter (A) passed to type Subset2 must support equality (got M) (perhaps try declaring type parameter 'M' on line 94 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(133,11): Error: type parameter (A) passed to type Syn5 must support equality (got ListWithALittlExtra<int>)
EqualityTypesModuleExports.dfy(134,11): Error: type parameter (A) passed to type Syn5 must support equality (got Co2<int, int>)
EqualityTypesModuleExports.dfy(135,11): Error: type parameter (A) passed to type Syn5 must support equality (got Opaque0) (perhaps try declaring abstract type 'Opaque0' on line 73 as 'Opaque0(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(139,11): Error: type parameter (A) passed to type Syn5 must support equality (got Syn1<int -> int>)
EqualityTypesModuleExports.dfy(13,8): Error: set argument type must support equality (got Klm) (perhaps try declaring type parameter 'Klm' on line 11 as 'Klm(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(13,23): Error: set argument type must support equality (got Klm) (perhaps try declaring type parameter 'Klm' on line 11 as 'Klm(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(32,18): Error: type parameter (X) passed to function Fib must support equality (got Y) (perhaps try declaring type parameter 'Y' on line 26 as 'Y(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(32,23): Error: set argument type must support equality (got Y) (perhaps try declaring type parameter 'Y' on line 26 as 'Y(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(34,13): Error: set argument type must support equality (got GG) (perhaps try declaring type parameter 'GG' on line 21 as 'GG(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(84,7): Error: type 'Syn4' declared as supporting equality, but the RHS type ((real, A)) might not (perhaps try declaring type parameter 'A' on line 84 as 'A(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(92,7): Error: type 'Subset4' declared as supporting equality, but the RHS type ((A, int)) might not (perhaps try declaring type parameter 'A' on line 92 as 'A(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(149,7): Error: recursive constraint dependency involving a subset type: SubsetCo -> Co -> SubsetCo
EqualityTypesModuleExports.dfy(162,11): Error: type parameter (A) passed to type MyClass must support equality (got Noeq)
EqualityTypesModuleExports.dfy(163,11): Error: type parameter (A) passed to type Dt must support equality (got Noeq)
EqualityTypesModuleExports.dfy(164,11): Error: type parameter (A) passed to type Co must support equality (got Noeq)
EqualityTypesModuleExports.dfy(165,11): Error: type parameter (A) passed to type Syn must support equality (got Noeq)
EqualityTypesModuleExports.dfy(166,11): Error: type parameter (A) passed to type SubsetCo must support equality (got Noeq)
EqualityTypesModuleExports.dfy(179,7): Error: recursive constraint dependency involving a subset type: SubsetCo -> Co -> SubsetCo
EqualityTypesModuleExports.dfy(196,11): Error: type parameter (A) passed to type MyClass must support equality (got Noeq)
EqualityTypesModuleExports.dfy(197,11): Error: type parameter (A) passed to type Dt must support equality (got Noeq)
EqualityTypesModuleExports.dfy(198,11): Error: type parameter (A) passed to type Co must support equality (got Noeq)
EqualityTypesModuleExports.dfy(199,11): Error: type parameter (A) passed to type Syn must support equality (got Noeq)
EqualityTypesModuleExports.dfy(200,11): Error: type parameter (A) passed to type SubsetCo must support equality (got Noeq)
EqualityTypesModuleExports.dfy(213,7): Error: recursive constraint dependency involving a subset type: SubsetCo -> Co -> SubsetCo
EqualityTypesModuleExports.dfy(230,11): Error: type parameter (A) passed to type MyClass must support equality (got Noeq)
EqualityTypesModuleExports.dfy(223,22): Error: set argument type must support equality (got A) (perhaps try declaring type parameter 'A' on line 223 as 'A(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(224,24): Error: iset argument type must support equality (got A) (perhaps try declaring type parameter 'A' on line 224 as 'A(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(249,7): Error: to be a refinement of abstract type 'EEE.Opa' declared with (==), type synonym 'FFF.Opa' must support equality
EqualityTypesModuleExports.dfy(265,12): Error: type parameter (A) passed to type S must support equality (got GGG.Opa'<int>) (perhaps try declaring abstract type 'Opa'' on line 243 as 'Opa'(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(266,12): Error: type parameter (A) passed to type S must support equality (got GGG.Syn'<int>)
EqualityTypesModuleExports.dfy(267,12): Error: type parameter (A) passed to type S must support equality (got GGG.Sub'<int>)
EqualityTypesModuleExports.dfy(284,7): Error: == can only be applied to expressions of types that support equality (got XT)
EqualityTypesModuleExports.dfy(287,7): Error: == can only be applied to expressions of types that support equality (got YT)
EqualityTypesModuleExports.dfy(290,7): Error: == can only be applied to expressions of types that support equality (got ZT)
EqualityTypesModuleExports.dfy(293,7): Error: == can only be applied to expressions of types that support equality (got WT)
EqualityTypesModuleExports.dfy(318,7): Error: type 'A' declared as supporting equality, but the RHS type (QQQ1.Syn<int>) might not
EqualityTypesModuleExports.dfy(333,7): Error: type 'ExportedType' declared as supporting equality, but the RHS type (PrivateType<A>) might not (perhaps try declaring type parameter 'A' on line 333 as 'A(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(381,4): Error: == can only be applied to expressions of types that support equality (got List<A>) (perhaps try declaring type parameter 'A' on line 379 as 'A(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfy(401,9): Warning: this export set is empty (did you perhaps forget the 'provides' or 'reveals' keyword?)
EqualityTypesModuleExports.dfy(444,7): Error: type 'Synonym' declared as being nonempty, but the RHS type (Empty) may be empty
EqualityTypesModuleExports.dfy(445,7): Error: type 'AnotherSynonym' declared as being nonempty, but the RHS type (Empty) may be empty
EqualityTypesModuleExports.dfy(448,7): Error: type 'NESynonym' declared as auto-initialization type, but the RHS type (NonEmpty) does not support auto-initialization
EqualityTypesModuleExports.dfy(452,7): Error: type 'NoReference' declared as containing no reference types, but the RHS type (C?) may contain reference types
EqualityTypesModuleExports.dfy(455,7): Error: type 'PipeDreamEquality' declared as supporting equality, but the RHS type (Stream) might not
EqualityTypesModuleExports.dfy(460,7): Error: type 'Subset' declared as being nonempty, but the RHS type (Empty) may be empty
EqualityTypesModuleExports.dfy(461,7): Error: type 'AnotherSubset' declared as being nonempty, but the RHS type (Empty) may be empty
EqualityTypesModuleExports.dfy(464,7): Error: type 'NESynonym' declared as auto-initialization type, but the RHS type (NonEmpty) does not support auto-initialization
EqualityTypesModuleExports.dfy(468,7): Error: type 'NoReference' declared as containing no reference types, but the RHS type (C?) may contain reference types
EqualityTypesModuleExports.dfy(471,7): Error: type 'PipeDreamEquality' declared as supporting equality, but the RHS type (Stream) might not
61 resolution/type errors detected in EqualityTypesModuleExports.dfy
