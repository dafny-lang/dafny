EqualityTypes.dfy(34,13): Error: to be a refinement of abstract type 'C.X' declared with (==), codatatype 'E.X' must support equality
EqualityTypes.dfy(35,11): Error: to be a refinement of abstract type 'C.Y' declared with (==), datatype 'E.Y' must support equality
EqualityTypes.dfy(40,11): Error: datatype 'X' is declared with a different number of type parameters (1 instead of 0) than the corresponding datatype in the module it refines
EqualityTypes.dfy(41,8): Error: class 'Y' is declared with a different number of type parameters (1 instead of 0) than the corresponding class in the module it refines
EqualityTypes.dfy(45,11): Error: to be a refinement of abstract type 'C.X' declared with (==), datatype 'G.X' must support equality
EqualityTypes.dfy(46,11): Error: to be a refinement of abstract type 'C.Y' declared with (==), datatype 'G.Y' must support equality
EqualityTypes.dfy(66,7): Error: == can only be applied to expressions of types that support equality (got Dt<T>) (perhaps try declaring type parameter 'T' on line 65 as 'T(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfy(85,9): Error: type parameter (T) passed to method M must support equality (got _T0) (perhaps try declaring type parameter '_T0' on line 81 as '_T0(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfy(109,7): Error: == can only be applied to expressions of types that support equality (got D)
EqualityTypes.dfy(114,13): Error: == can only be applied to expressions of types that support equality (got D)
EqualityTypes.dfy(118,16): Error: == can only be applied to expressions of types that support equality (got D)
EqualityTypes.dfy(147,8): Error: set argument type must support equality (got Co)
EqualityTypes.dfy(149,14): Error: type parameter (Y) passed to function G must support equality (got Co)
EqualityTypes.dfy(156,11): Error: set argument type must support equality (got Co)
EqualityTypes.dfy(173,8): Error: set argument type must support equality (got Dt<Co>)
EqualityTypes.dfy(176,8): Error: set argument type must support equality (got Left<Co, int>)
EqualityTypes.dfy(177,15): Error: type parameter 1 (U) passed to type Right must support equality (got Co)
EqualityTypes.dfy(179,17): Error: type parameter 1 (U) passed to type RightExplicit must support equality (got Co)
EqualityTypes.dfy(181,8): Error: set argument type must support equality (got Syn<int, int, Co>)
EqualityTypes.dfy(184,8): Error: set argument type must support equality (got Co)
EqualityTypes.dfy(185,8): Error: set argument type must support equality (got Co)
EqualityTypes.dfy(192,8): Error: set argument type must support equality (got Co)
EqualityTypes.dfy(196,11): Error: set argument type must support equality (got Co)
EqualityTypes.dfy(196,20): Error: set argument type must support equality (got Co)
EqualityTypes.dfy(210,8): Error: set argument type must support equality (got Co)
EqualityTypes.dfy(211,20): Error: set argument type must support equality (got Co)
EqualityTypes.dfy(211,29): Error: set argument type must support equality (got Co)
EqualityTypes.dfy(212,17): Error: set argument type must support equality (got Co)
EqualityTypes.dfy(233,12): Error: type parameter (A) passed to method Explicit must support equality (got Co)
EqualityTypes.dfy(233,13): Error: set argument type must support equality (got Co)
EqualityTypes.dfy(234,19): Error: set argument type must support equality (got Co)
EqualityTypes.dfy(236,34): Error: type parameter (A) passed to method InferEqualitySupportIsRequired must support equality (got Co)
EqualityTypes.dfy(236,35): Error: set argument type must support equality (got Co)
EqualityTypes.dfy(238,24): Error: set argument type must support equality (got Co)
EqualityTypes.dfy(239,21): Error: multiset argument type must support equality (got Co)
EqualityTypes.dfy(241,8): Error: map domain type must support equality (got Co)
EqualityTypes.dfy(241,14): Error: map domain type must support equality (got Co)
EqualityTypes.dfy(255,15): Error: type parameter 'T' (inferred to be '?') in the function call to 'UG' could not be determined
EqualityTypes.dfy(256,4): Error: type parameter 'T' (inferred to be '?') to the method 'UP' could not be determined
EqualityTypes.dfy(259,8): Error: the type of this local variable is underspecified
EqualityTypes.dfy(261,4): Error: type parameter 'T' (inferred to be 'set<?>') to the method 'Callee' could not be determined
EqualityTypes.dfy(264,4): Error: type parameter 'T' (inferred to be 'TakesParam<?>') to the method 'Callee' could not be determined
EqualityTypes.dfy(284,14): Error: type parameter (T) passed to method Callee must support equality (got Dt)
EqualityTypes.dfy(285,23): Error: type parameter (T) passed to method Callee must support equality (got Stream<int>)
EqualityTypes.dfy(289,8): Error: set argument type must support equality (got Dt)
EqualityTypes.dfy(290,8): Error: iset argument type must support equality (got Dt)
EqualityTypes.dfy(291,8): Error: multiset argument type must support equality (got ArbitraryTypeArg) (perhaps try declaring type parameter 'ArbitraryTypeArg' on line 282 as 'ArbitraryTypeArg(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfy(293,8): Error: map domain type must support equality (got Dt)
EqualityTypes.dfy(295,8): Error: imap domain type must support equality (got Dt)
EqualityTypes.dfy(303,8): Error: set argument type must support equality (got Stream<int>)
EqualityTypes.dfy(305,28): Error: set argument type must support equality (got Stream<int>)
EqualityTypes.dfy(306,33): Error: set argument type must support equality (got Stream<int>)
EqualityTypes.dfy(309,13): Error: type parameter 0 (V) passed to type AClass must support equality (got Stream<int>)
EqualityTypes.dfy(312,19): Error: type parameter 0 (V) passed to type AClass must support equality (got Stream<int>)
EqualityTypes.dfy(313,39): Error: type parameter 1 (X) passed to function H must support equality (got Stream<real>)
EqualityTypes.dfy(315,19): Error: type parameter 0 (V) passed to type AClass must support equality (got Stream<int>)
EqualityTypes.dfy(316,19): Error: type parameter 1 (X) passed to function H must support equality (got Stream<real>)
EqualityTypes.dfy(319,51): Error: type parameter 1 (X) passed to function H must support equality (got Stream<real>)
EqualityTypes.dfy(321,15): Error: type parameter 0 (V) passed to type AClass must support equality (got Stream<real>)
EqualityTypes.dfy(323,4): Error: type parameter 0 (V) passed to type AClass must support equality (got Stream<int>)
EqualityTypes.dfy(326,48): Error: type parameter 1 (B) passed to method Q must support equality (got Stream<real>)
EqualityTypes.dfy(328,4): Error: set argument type must support equality (got Stream<int>)
EqualityTypes.dfy(329,45): Error: set argument type must support equality (got Stream<real>)
EqualityTypes.dfy(330,15): Error: set argument type must support equality (got Stream<int>)
EqualityTypes.dfy(331,56): Error: set argument type must support equality (got Stream<real>)
EqualityTypes.dfy(334,7): Error: == can only be applied to expressions of types that support equality (got seq<int -> int>)
EqualityTypes.dfy(337,14): Error: in can only be applied to expressions of sequence types that support equality (got seq<int -> int>)
EqualityTypes.dfy(340,16): Error: in can only be applied to expressions of sequence types that support equality (got seq<int -> int>)
EqualityTypes.dfy(359,11): Error: type parameter (A) passed to type JustOpaque must support equality (got ABC) (perhaps try declaring abstract type 'ABC' on line 354 as 'ABC(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfy(360,11): Error: type parameter (A) passed to type Synonym must support equality (got ABC) (perhaps try declaring abstract type 'ABC' on line 354 as 'ABC(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfy(361,11): Error: type parameter (A) passed to type Subset must support equality (got ABC) (perhaps try declaring abstract type 'ABC' on line 354 as 'ABC(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfy(376,9): Error: == can only be applied to expressions of types that support equality (got List<A>) (perhaps try declaring type parameter 'A' on line 373 as 'A(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfy(378,9): Error: == can only be applied to expressions of types that support equality (got List<A>) (perhaps try declaring type parameter 'A' on line 373 as 'A(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfy(381,9): Error: == can only be applied to expressions of types that support equality (got List<A>) (perhaps try declaring type parameter 'A' on line 373 as 'A(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfy(386,9): Error: == can only be applied to expressions of types that support equality (got (A, List<A>)) (perhaps try declaring type parameter 'A' on line 384 as 'A(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfy(392,9): Error: == can only be applied to expressions of types that support equality (got GhostRecord)
EqualityTypes.dfy(397,9): Error: == can only be applied to expressions of types that support equality (got Co<A>)
EqualityTypes.dfy(412,8): Error: set argument type must support equality (got A) (perhaps try declaring type parameter 'A' on line 410 as 'A(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfy(416,12): Error: in can only be applied to expressions of sequence types that support equality (got seq<A>) (perhaps try declaring type parameter 'A' on line 414 as 'A(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfy(419,20): Error: in can only be applied to expressions of sequence types that support equality (got seq<A>) (perhaps try declaring type parameter 'A' on line 414 as 'A(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfy(423,15): Error: <= can only be applied to expressions of sequence types that support equality (got seq<A>) (perhaps try declaring type parameter 'A' on line 414 as 'A(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfy(427,8): Error: set argument type must support equality (got (A, B)) (perhaps try declaring type parameter 'B' on line 425 as 'B(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfy(429,8): Error: set argument type must support equality (got B) (perhaps try declaring type parameter 'B' on line 425 as 'B(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfy(436,8): Error: map domain type must support equality (got A) (perhaps try declaring type parameter 'A' on line 434 as 'A(==)', which says it can only be instantiated with a type that supports equality)
84 resolution/type errors detected in EqualityTypes.dfy
