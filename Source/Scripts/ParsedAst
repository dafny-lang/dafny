class FilesContainer
{
    List<FileStart> files;
}

class FileStart
{
    String uri;
    List<TopLevelDecl> topLevelDecls;
}

abstract class Node
{
}

abstract class RangeNode : Node
{
    SourceOrigin origin;
}

class SourceOrigin
{
    Token startToken;
    Token endToken;
    Token center;
}

class Token
{
    Int32 line;
    Int32 col;
}

abstract class Declaration : RangeNode
{
    Name name;
    Attributes attributes;
}

abstract class NodeWithComputedRange : Node
{
    SourceOrigin origin;
}

class Attributes : NodeWithComputedRange
{
    String name;
    List<Expression> args;
    Attributes? prev;
}

abstract class Expression : NodeWithComputedRange
{
}

class Name : RangeNode
{
    String value;
}

abstract class TopLevelDecl : Declaration
{
    List<TypeParameter> typeArgs;
}

class TypeParameter : Declaration
{
    TypeParameterTPVarianceSyntax varianceSyntax;
    TypeParameterTypeParameterCharacteristics characteristics;
    List<Type> typeBounds;
}

abstract class Type : NodeWithComputedRange
{
}

class TypeParameterTypeParameterCharacteristics
{
    TypeParameterEqualitySupportValue equalitySupport;
    TypeAutoInitInfo autoInit;
    Boolean containsNoReferenceTypes;
}

enum TypeAutoInitInfo
{
    MaybeEmpty,
    Nonempty,
    CompilableValue
}

enum TypeParameterEqualitySupportValue
{
    Required,
    InferredRequired,
    Unspecified
}

enum TypeParameterTPVarianceSyntax
{
    NonVariant_Strict,
    NonVariant_Permissive,
    Covariant_Strict,
    Covariant_Permissive,
    Contravariance
}